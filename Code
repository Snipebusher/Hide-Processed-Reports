// ==UserScript==
// @name         Hide Processed Reports
// @namespace    http://tampermonkey.net/
// @version      1.01
// @description  Efficiently hides messages in #overwatch-reports with reactions/strings
// @author       Snipebusher
// @match        https://discord.com/channels/549281623154229250/1097451336183857173
// @grant        none
// ==/UserScript==

(function() {
    'use strict';
    // =========================
    // TWEAKABLE SETTINGS
    // =========================
    const MAX_MESSAGE_AGE_MS = 14 * 24 * 60 * 60 * 1000;
    const HIDE_DELAY_MS = 70;
    const LOOP_DELAY_MS = 2000;
    const HIDE_SCROLL_LOOP_COUNT = 3;
    const UI_POLL_INITIAL_DELAY_MS = 200;
    const UI_POLL_MAX_DELAY_MS = 1000;
    const SCROLL_STOP_DELAY_MS = 1000;

    let hideSystemMessages = false;

    const SCROLLER_SELECTOR = '[class*="scrollerInner"]';
    const MESSAGE_ITEM_SEL = 'li[id^="chat-messages-"]';
    const DIVIDER_SEL = 'div[class*="divider__"][role="separator"]';

    const MONTH_NAMES = [
        "January","February","March","April","May","June",
        "July","August","September","October","November","December"
    ];

    function parseUserDate(input) {
        const parts = input.trim().split('/');
        if (parts.length !== 3) return null;
        let [d, m, y] = parts.map(p => p.trim());
        if (!/^\d{1,2}$/.test(d) || !/^\d{1,2}$/.test(m) || !/^\d{1,4}$/.test(y)) return null;
        let day = parseInt(d, 10),
            month = parseInt(m, 10),
            year = parseInt(y, 10);
        if (day < 1 || day > 31 || month < 1 || month > 12) return null;
        if (y.length <= 2) year += 2000;
        return `${MONTH_NAMES[month - 1]} ${day}, ${year}`;
    }

    function isSystemMessage(msgDiv) {
        return msgDiv.classList.contains('systemMessage__5126c');
    }

    function getMessageTime(msgDiv) {
        const timeElem = msgDiv.querySelector('time');
        if (!timeElem) return null;
        const dt = timeElem.getAttribute('datetime');
        return dt ? new Date(dt) : null;
    }

    function isRecent(msgDiv) {
        const msgTime = getMessageTime(msgDiv);
        return msgTime && (Date.now() - msgTime.getTime()) <= MAX_MESSAGE_AGE_MS;
    }

    function shouldHide(msgDiv) {
        if (!isRecent(msgDiv)) return false;
        if (isSystemMessage(msgDiv)) {
            return hideSystemMessages;
        }
        const hasReactions = !!msgDiv.querySelector('[class*="reaction"]');
        const accessoriesDiv = msgDiv.querySelector('[id^="message-accessories-"]');
        const hasAccessories = accessoriesDiv && accessoriesDiv.children.length > 0;
        return hasReactions || hasAccessories;
    }

    function hideMessage(msgItem) {
        const msgDiv = msgItem.querySelector('div');
        if (!msgDiv || msgItem.dataset._hidden) return false;
        if (shouldHide(msgDiv)) {
            msgItem.dataset._hidden = 'true';
            msgDiv.style.visibility = 'hidden';
            msgDiv.style.pointerEvents = 'none';
            msgDiv.style.opacity = '0';
            msgDiv.style.height = `${msgDiv.offsetHeight}px`;
            return true;
        }
        return false;
    }

    function revealSystemMessage(msgItem) {
        const msgDiv = msgItem.querySelector('div');
        if (!msgDiv || !msgItem.dataset._hidden) return;
        if (!isSystemMessage(msgDiv)) return;
        msgDiv.style.visibility = '';
        msgDiv.style.pointerEvents = '';
        msgDiv.style.opacity = '';
        msgDiv.style.height = '';
        delete msgItem.dataset._hidden;
    }

    function hideMessagesBatch(msgItems, index = 0, callback) {
        if (index >= msgItems.length) {
            if (callback) callback();
            return;
        }
        const didHide = hideMessage(msgItems[index]);
        setTimeout(
            () => hideMessagesBatch(msgItems, index + 1, callback),
            didHide ? HIDE_DELAY_MS : 0
        );
    }

    function hideAllLoadedMessages(callback) {
        const allItems = Array.from(document.querySelectorAll(MESSAGE_ITEM_SEL));
        hideMessagesBatch(allItems, 0, callback);
    }

    function revealHiddenSystemMessages() {
        const hiddenItems = document.querySelectorAll(`${MESSAGE_ITEM_SEL}[data-_hidden="true"]`);
        hiddenItems.forEach(item => revealSystemMessage(item));
    }

    function onNewMessages(mutations) {
        mutations.forEach(mut => {
            mut.addedNodes.forEach(node => {
                if (node.nodeType !== 1) return;
                if (!node.matches(MESSAGE_ITEM_SEL)) return;
                hideMessage(node);
            });
        });
    }

    function watchNewMessages() {
        const scrollContainer = document.querySelector(SCROLLER_SELECTOR);
        if (!scrollContainer) return;
        new MutationObserver(onNewMessages).observe(scrollContainer, {
            childList: true,
            subtree: true
        });
    }

    let scrollTimeout = null;
    function onScrollStop() {
        hideAllLoadedMessages();
    }

    function hookScrollWatcher() {
        const scroller = document.querySelector(SCROLLER_SELECTOR);
        if (!scroller) {
            setTimeout(hookScrollWatcher, 300);
            return;
        }
        scroller.addEventListener('scroll', () => {
            if (scrollTimeout) clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(onScrollStop, SCROLL_STOP_DELAY_MS);
        });
    }

    function waitForUIReady(anchorDate) {
        return new Promise(resolve => {
            let delay = UI_POLL_INITIAL_DELAY_MS;
            function check() {
                const scroller = document.querySelector(SCROLLER_SELECTOR);
                const anchor = Array.from(document.querySelectorAll(DIVIDER_SEL))
                    .find(div => div.getAttribute('aria-label')?.trim() === anchorDate);
                if (scroller && anchor) {
                    resolve(anchor);
                } else {
                    setTimeout(check, delay);
                    delay = Math.min(delay * 1.5, UI_POLL_MAX_DELAY_MS);
                }
            }
            check();
        });
    }

    function fullyRemoveHiddenMessages() {
        const userInput = prompt("Enter anchor date (DD/MM/YYYY or D/M/YY):");
        if (!userInput) return;
        const parsed = parseUserDate(userInput);
        if (!parsed) {
            alert("Invalid date format. Use DD/MM/YYYY or D/M/YY.");
            return;
        }

        const scroller = document.querySelector(SCROLLER_SELECTOR);
        if (!scroller) {
            alert("Discord UI not fully loaded. Try again in a moment.");
            return;
        }
        const loadedDividers = Array.from(document.querySelectorAll(DIVIDER_SEL));
        const targetImmediate = loadedDividers.find(div => div.getAttribute('aria-label')?.trim() === parsed);

        if (!targetImmediate) {
            alert(`Divider "${parsed}" not found among currently loaded messages. Scroll to that date and try again.`);
            return;
        }

        let iteration = 0;
        async function doLoop() {
            const target = await waitForUIReady(parsed);
            const hiddenItems = Array.from(document.querySelectorAll(`${MESSAGE_ITEM_SEL}[data-_hidden="true"]`));
            hiddenItems.forEach(item => { item.style.display = 'none'; });
            setTimeout(async () => {
                const anchorNow = Array.from(document.querySelectorAll(DIVIDER_SEL))
                    .find(div => div.getAttribute('aria-label')?.trim() === parsed);
                if (anchorNow) anchorNow.scrollIntoView({ block: 'start' });

                iteration++;
                if (iteration < HIDE_SCROLL_LOOP_COUNT) {
                    setTimeout(doLoop, LOOP_DELAY_MS);
                }
            }, LOOP_DELAY_MS);
        }

        doLoop();
    }

    function createControlButtons() {
        const container = document.createElement('div');
        Object.assign(container.style, {
            position: 'fixed',
            top: '90px',
            right: '15px',
            zIndex: '9999',
            background: '#2f3136',
            padding: '8px',
            borderRadius: '6px',
            boxShadow: '0 0 10px rgba(0,0,0,0.3)',
            display: 'flex',
            flexDirection: 'column',
            gap: '6px'
        });

        const toggleBtn = document.createElement('button');
        toggleBtn.textContent = 'Hide System Msgs (Off)';
        Object.assign(toggleBtn.style, {
            background: '#5865F2',
            color: 'white',
            border: 'none',
            padding: '5px 10px',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px'
        });
        toggleBtn.onclick = () => {
            hideSystemMessages = !hideSystemMessages;
            toggleBtn.textContent = `Hide System Msgs (${hideSystemMessages ? 'On' : 'Off'})`;

            if (hideSystemMessages) {
                const sysItems = Array.from(document.querySelectorAll(MESSAGE_ITEM_SEL)).filter(item => {
                    const div = item.querySelector('div');
                    return div && isSystemMessage(div) && isRecent(div) && !item.dataset._hidden;
                });
                hideMessagesBatch(sysItems);
            } else {
                revealHiddenSystemMessages();
            }
        };

        const fullHideBtn = document.createElement('button');
        fullHideBtn.textContent = 'Fully Hide Hidden (Choose Date)';
        Object.assign(fullHideBtn.style, {
            background: '#ff4757',
            color: 'white',
            border: 'none',
            padding: '5px 10px',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '12px'
        });
        fullHideBtn.onclick = fullyRemoveHiddenMessages;

        container.appendChild(toggleBtn);
        container.appendChild(fullHideBtn);
        document.body.appendChild(container);
    }

    function hideInitialMessages() {
        const items = Array.from(document.querySelectorAll(MESSAGE_ITEM_SEL));
        hideMessagesBatch(items);
    }

    function waitForDiscordUI() {
        const scroller = document.querySelector(SCROLLER_SELECTOR);
        if (!scroller) {
            setTimeout(waitForDiscordUI, 500);
            return;
        }
        createControlButtons();
        hideInitialMessages();
        hookScrollWatcher();
        watchNewMessages();
    }

    waitForDiscordUI();
})();
